@inherits LayoutComponentBase

@inject HttpClient httpClient
@inject IJSRuntime Js

<div class="content px-4">
    <div class="box">
        <div class="box-head">
            <h3 class="title">@Title_InsEmp</h3>
        </div>
        <div class="box-body">
            <EditForm Model="ProductModel" OnValidSubmit="AddProduct">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <h3>Insert Product</h3>
                <div class="col-xl-6 col-lg-12 col-md-12 col-sm-12">

                    <div class="form-group my-2">
                        <label>Company:</label>
                        <select @onchange="OnCompanySelect" class="form-control">
                            <option selected disabled value="0">-- Select Company --</option>
                            @foreach (var Company in CompanyListModel)
                            {
                                <option value="@Company.Id">@Company.CompanyName</option>
                            }
                        </select>
                        
                    </div>

                    <div class="form-group my-2">
                        <label>Brand:</label>
                        <select @bind="@ProductModel.BrandId" class="form-control">
                            <option selected disabled value="0">-- Select Company --</option>
                            @foreach (var Brand in BrandListModel)
                            {
                                <option value="@Brand.Id">@Brand.BrandName</option>
                            }
                        </select>
                        <ValidationMessage For="@(()=>ProductModel.BrandId)" />
                    </div>

                    <div class="form-group my-2">
                        <label>Name:</label>
                        <input @bind-value="@ProductModel.Name" type="text" class="form-control" />
                        <ValidationMessage For="@(()=>ProductModel.Name)" />
                    </div>
                    <div class="form-group my-2">
                        <label>Amount:</label>
                        <input @bind-value="@ProductModel.Amount" type="text" class="form-control" />
                        <ValidationMessage For="@(()=>ProductModel.Amount)" />
                    </div>
                    <div class="form-group my-2">
                        <label>Price:</label>
                        <input @bind-value="@ProductModel.Price" type="text" class="form-control" />
                        <ValidationMessage For="@(()=>ProductModel.Price)" />
                    </div>

                    <button type="submit" class="btn btn-success mt-2">Add Product</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string Title_InsEmp { get; set; } = "Insert Product";

    public List<BrandViewModel> BrandListModel = new List<BrandViewModel>();
    public List<CompanyViewModel> CompanyListModel = new List<CompanyViewModel>();

    public ProductViewModel ProductModel = new ProductViewModel();

    [Inject]
    public ApiUri ApiUri { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CompanyListModel =
            await httpClient.GetFromJsonAsync<List<CompanyViewModel>>($"{ApiUri.ApiUriAddress}/api/Product/GetCompanies");
    }

    protected async Task OnCompanySelect(ChangeEventArgs e)
    {
        int CompanyId = Convert.ToInt32(e.Value);

        BrandListModel =
        await httpClient.GetFromJsonAsync<List<BrandViewModel>>($"{ApiUri.ApiUriAddress}/api/Product/GetBrandsByCompanyId/{CompanyId}");

        ProductModel.BrandId = 0;
    }

    protected async Task AddProduct()
    {
        var Res = await httpClient.PostAsJsonAsync($"{ApiUri.ApiUriAddress}/api/Product/InsertProduct", ProductModel);
        var ResModel = await Res.Content.ReadFromJsonAsync<ResponseModel>();

        if (Res.StatusCode.ToString() == "OK")
            await Js.InvokeVoidAsync("toastr.success", "New product added", "Succeed");
        else
            await Js.InvokeVoidAsync("toastr.error", $"{ResModel.Error}", "Error");

        ProductModel.Name = "";
        ProductModel.Amount = 0;
        ProductModel.Price = 0;
    }
}
